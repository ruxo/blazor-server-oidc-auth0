@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<AuthorizeView>
   <Authorized>
      <h1>Hello @user.Identity!.Name</h1>
      <div><a href="#" @onclick="Logout">Logout</a></div>
      <table>
         <tr><th>Type</th><th>Value</th><th>Value Type</th><th>Props count</th></tr>
         @foreach (var claim in user.Claims) {
            <tr>
               <td>
                  <div>@claim.Type</div>
                  <div style="color: silver; font-size: .6em">@claim.ValueType</div>
               </td>
               <td><pre>@claim.Value</pre></td>
               <td>
                  @if (claim.Properties.Count > 0) {
                     <table style="border: 1px solid black">
                        @foreach (var k in claim.Properties.Keys) {
                           <tr><td>@k</td><td>@claim.Properties[k]</td></tr>
                        }
                     </table>
                  }
                  else {
                     <span>&nbsp;</span>
                  }
               </td>
            </tr>
         }
      </table>
      @if (accessToken is not null) {
         <hr/>
         <h1>Access Token</h1>
         <pre style="white-space: pre-wrap; word-wrap: break-word">@accessToken</pre>
      }
      @if (idToken is not null) {
         <hr/>
         <h1>ID Token</h1>
         <pre style="white-space: pre-wrap; word-wrap: break-word">@idToken</pre>
      }
   </Authorized>
   <NotAuthorized>
      <p>Please login</p>
      <div>
         <a href="#" @onclick="Login">Login</a>
      </div>
   </NotAuthorized>
</AuthorizeView>

@code {

   ClaimsPrincipal user = new (new ClaimsIdentity());
   string? accessToken;
   string? idToken;

   protected override async Task OnInitializedAsync() {
      var authState = await AuthState.GetAuthenticationStateAsync();
      user = authState.User;

      accessToken = await HttpContextAccessor.HttpContext!.GetTokenAsync("access_token");
      idToken = await HttpContextAccessor.HttpContext!.GetTokenAsync("id_token");
   }

   async Task Login() {
      await JsRuntime.InvokeVoidAsync("MyHelpers.preventReconnection");
      NavManager.NavigateTo("/login", forceLoad: true);
   }

   async Task Logout() {
      await JsRuntime.InvokeVoidAsync("MyHelpers.preventReconnection");
      NavManager.NavigateTo("/logout", forceLoad: true);
   }

}